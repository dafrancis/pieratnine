<p>Bix can route up your news site and plays nice with other libraries like jQuery!</p>
<pre class="prettyprint linenums">var bix = Bix();

bix.add('/', function () {
    // Show Home page
});

// Use colons for parameters in urls.
// These parameters then become the parameters in the function!
bix.add('/article/:id', function (newsId) {
    $.get('/article', { id: newsId }, function (data) {
        // Display on page
    });
});

bix.run();</pre>
<p>At this time Bix has some configuration options for you to customise</p>
<pre class="prettyprint linenums">var bix = Bix();

bix.config({
    // Make a custom error handler
    error : function (e) {
        var error_cat = $('&lt;img&gt;').attr('src', 'http://httpcats.herokuapp.com/' + e.status);
        $('#main').html(error_cat);
    },
    // Set the root of your application. (The default is '/')
    root: 'my_awesome_app',
    // force Bix to use hashbang urls (Default is false)
    forceHash: false,
    // Choose whether you want Bix to make the urls show as hashbangs or just plain hashes (Default is true)
    hashBang: true
});

// Why not define the functions elsewhere in your code?
bix.add('/', MyJsApp.page.home);

bix.run();</pre>
<p>Urls to run through the Bix router need to be "hashbangs" (eg. href="#!/your_page"). If you are putting this live on a server though it's suggested that you add handlers for ?_escaped_fragment_= and ajax calls.</p>
<p>This is the one used for this page (using sinatra):</p>
<pre class="prettyprint linenums">require 'sinatra/base'

class BixApp < Sinatra::Base
  set :root, File.expand_path('../../', __FILE__)
  set :views, root + '/views/bix'

  URL_ROOT = '/bix'

  # If the page is being requested by an ajax call then do not render the layout
  def render_erb(template, options={})
    erb(template, options.merge(:layout => !request.xhr?))
  end

  get '/' do
    # Handles the ?_escaped_fragment_= bit
    redirect URL_ROOT + params[:"_escaped_fragment_"] if params[:"_escaped_fragment_"]
    render_erb :home
  end

  get '/how_to' do
    render_erb :how_to
  end

  get '/download' do
    render_erb :download
  end
end
</pre>
